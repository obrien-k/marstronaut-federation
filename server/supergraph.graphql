
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type account
  @join__type(graph: ACCOUNTS, key: "id")
{
  id: ID!
  role: String!
}

"""Astronomy photo of the day"""
type Apod
  @join__type(graph: NASA)
{
  """Image URL"""
  url: String

  """High definition image URL"""
  hdurl: String
}

type Comic
  @join__type(graph: XKCD)
{
  month: String!
  day: String!
  year: String!
  alt: String!
}

scalar join__FieldSet

enum join__Graph {
  ACCOUNTS @join__graph(name: "accounts", url: "https://marstronaut-accounts.fly.dev/")
  NASA @join__graph(name: "nasa", url: "https://marstronaut-nasa.fly.dev/")
  XKCD @join__graph(name: "xkcd", url: "https://marstronaut-xkcd.fly.dev/")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Manifest
  @join__type(graph: NASA)
{
  photo_manifest: Photo_Manifest
}

type Mutation
  @join__type(graph: ACCOUNTS)
{
  addAccount(id: ID!, role: String!): account
}

type Photo_Details
  @join__type(graph: NASA, key: "id")
  @join__type(graph: XKCD, key: "id")
{
  id: ID!
  img_src: String @join__field(graph: NASA)
  totally: totally @join__field(graph: XKCD)
}

type Photo_Manifest
  @join__type(graph: NASA)
{
  """Name of the rover"""
  name: String

  """Date when the rover landed on Mars"""
  landing_date: String

  """Date when the rover launched from Earth"""
  launch_date: String

  """Mission status of the rover"""
  status: String

  """The most recent Martian sol from which photos exist"""
  max_sol: String

  """The most recent Earth date from which photos exist"""
  max_date: String

  """Number of photos taken by the rover"""
  total_photos: Int
  photos: [Photos!]!
}

type Photolist
  @join__type(graph: NASA)
{
  photos: [Photo_Details]
}

type Photos
  @join__type(graph: NASA)
{
  sol: Int
  earth_date: String
  total_photos: Int
  cameras: [String]
}

type Query
  @join__type(graph: ACCOUNTS)
  @join__type(graph: NASA)
  @join__type(graph: XKCD)
{
  """Returns all accounts"""
  accounts: [account] @join__field(graph: ACCOUNTS)

  """Find one account based on ID"""
  account(id: ID!): account @join__field(graph: ACCOUNTS)

  """Retrieves manifest info based on rover name"""
  Manifest(name: String!): Manifest! @join__field(graph: NASA)

  """Retrieves photos from a rover for a specific day"""
  Photolist(rover_name: String!, earth_date: String!): Photolist @join__field(graph: NASA)

  """Retrieves the astronomy photo of the day"""
  Apod: Apod @join__field(graph: NASA)

  """Retrieves comic info based on comic number"""
  Comic(comic_number: Int!): Comic @join__field(graph: XKCD)

  """totally cool"""
  totally: totally @join__field(graph: XKCD)
}

type totally
  @join__type(graph: XKCD)
{
  id: ID!
  cool: Boolean
}